Informe Tarea 2: Prioridades en Sistemas Operativos

Un sistema de prioridades consiste en una metodología para el scheduling en donde los procesos se organizan en orden 
de ejecución siguiendo un valor que determina sus prioridades. En general, el objetivo para un sistema de este tipo
es que procesos "importantes" o considerados de mayor valor se ejecuten antes (prioritariamente) que otros. La
prioridad es un número que es asignado a cada proceso, generalmente ordenados de menor a mayor (menor = mayor
prioridad) y un proceso con mayor prioridad se ejectuará antes que uno con menor prioridad. También, el concepto de
boost es relevante y este representa a un mecanismo para ajustar la prioridad de procesos durante el tiempo de 
ejecución, para evitar que un proceso se mantenga mucho tiempo esperando, evitando hambruna por agotamiento de
recursos. Para resumir, primero se asignan las prioridades a los procesos, luego se crea una cola de procesos para
que se ejecuten y durante este período de ejecución se puede llevar a cabo un boost para evitar las situaciones
comentadas anteriormente.

Las modificaciones realizadas fueron en: archivo proc.h, en donde se agregaron las variables prioridad y boost al
struct. Luego, en proc.c, dentro de la función allocproc se inicializaron las prioridades en 0 y el boost en 1, y 
dentro del mismo archivo, se modificó la función scheduler para implementar la lógica de aumento de prioridad a los 
procesos, junto con la lógica de boost. Por último, creé el programa de prueba y lo agregué dentro del Makefile.

A lo largo de la tarea, me encontré con diversos, errores, algunos simples como un error tipo panic en xv6 que tenía
relación con la asignación de memorias, para lo que tuve que modificar otra vez la función allocproc, y luego tuve
problemas para finalizar la tarea dado que el programa de prueba no mostró los mejores resultados, se imprimían de 
manera caótica los valores y no supe solucionarlo a tiempo, sin embargo, pude avanzar con una buen porcentaje
de la tarea, quizás con un console lock podría haberlo solucionado.
